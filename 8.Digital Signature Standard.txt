from cryptography.hazmat.backends import default_backend
from cryptography.hazmat.primitives import hashes
from cryptography.hazmat.primitives.asymmetric import dsa
from cryptography.hazmat.primitives import serialization

def generate_dsa_key_pair():
    private_key = dsa.generate_private_key(key_size=1024, backend=default_backend())
    public_key = private_key.public_key()
    return private_key, public_key

def sign_message(private_key, message):
    # Encode the message string to bytes before signing
    signature = private_key.sign(message.encode('utf-8'), hashes.SHA256())
    return signature

def verify_signature(public_key, message, signature):
    try:
        # Encode the message string to bytes before verification
        public_key.verify(signature, message.encode('utf-8'), hashes.SHA256())
        return True
    except:
        return False

if __name__ == "__main__":
    private_key, public_key = generate_dsa_key_pair()
    message = input("enter the message: ")

    signature = sign_message(private_key, message)
    is_valid_signature = verify_signature(public_key, message, signature)

    print("Original Message:", message)
    print("Signature:", signature.hex())
    print("Is Valid Signature:", is_valid_signature)